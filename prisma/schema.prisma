// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                @id @default(autoincrement())
  username          String             @unique
  email             String             @unique
  password          String
  profilePicture    String?
  role              UserRole           @default(USER)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  tokens            Token[]
  library           UserLibrary? @relation(fields: [libraryId], references: [id])
  libraryId         Int?
  articles          Article[]          @relation("ArticleContributors")
  comments          Comment[]
  friends           User[]             @relation("UserFriends")
  friendsOf         User[]             @relation("UserFriends")
  wishlistPlants    WishlistPlant[]
  graveyardPlants   GraveyardPlant[]
  rooms             Room[] // userRooms
  changeRequests    ChangeRequest[]
  approvals         Approval[]
  moderatorRequests ModeratorRequest[]
  flags             UserFlag[]
  strikes           Int                @default(0)
  isBanned          Boolean            @default(false)
  banExpiresAt      DateTime?
  Deactivated       DateTime?
  lastActive        DateTime           @default(now())
  Discussion        Discussion[]
  offeredTrades   TradeOffer[] @relation("OfferedTrades")
  receivedTrades  TradeOffer[] @relation("ReceivedTrades")
  notifications     UserNotification[]
}

enum UserRole {
  USER
  MODERATOR
  ADMIN
}

model Token {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int // Foreign key to User
  token     String    @unique
  type      TokenType // Enum for token types
  expiresAt DateTime // Expiration date of the token
  createdAt DateTime  @default(now())
  isActive  Boolean   @default(true)
}

enum TokenType {
  PASSWORD_RESET
  ACCOUNT_VERIFICATION
  ONE_TIME_LOGIN
  DEACTIVATION
}

model UserLibrary {
  id         Int         @id @default(autoincrement())
  user       User        @relation(fields: [userId], references: [id])
  userId     Int         @unique
  userPlants UserPlant[]?
}

model UserPlant {
  id              Int              @id @default(autoincrement())
  library         UserLibrary      @relation(fields: [libraryId], references: [id])
  libraryId       Int
  plant           Plant            @relation(fields: [plantId], references: [id])
  plantId         Int              @unique
  nickname        String?
  acquiredDate    DateTime
  notes           String?
  photos          UserPlantPhoto[]
  wateringLogs    WateringLog[]
  fertilizingLogs FertilizingLog[]
  room            Room?            @relation(fields: [roomId], references: [id]) // Belongs to a room
  roomId          Int?
  offeredInTrades TradeOffer[] @relation("OfferedPlant")
  requestedInTrades TradeOffer[] @relation("RequestedPlant")
}

model UserPlantPhoto {
  id          Int       @id @default(autoincrement())
  userPlant   UserPlant @relation(fields: [userPlantId], references: [id])
  userPlantId Int
  photoUrl    String
  description String?
  takenAt     DateTime
}

model Plant {
  id             Int        @id @default(autoincrement())
  name           String
  scientificName String     @unique
  commonName     String
  family         String
  icon           String
  light          String
  temperature    String
  soil           String
  climate        String
  humidity       String
  growthCycle    String
  toxicity       String
  petSafe        Boolean
  plantType      String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  article        Article?
  UserPlant      UserPlant?
}

model Article {
  id             Int             @id @default(autoincrement())
  title          String
  content        String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  plant          Plant           @relation(fields: [plantId], references: [id])
  plantId        Int             @unique
  contributors   User[]          @relation("ArticleContributors") // Allow multiple contributors
  comments       Comment[]
  changeRequests ChangeRequest[]
  discussions    Discussion[]
  UserFlag       UserFlag[]
}

model Discussion {
  id        Int          @id @default(autoincrement())
  content   String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  article   Article      @relation(fields: [articleId], references: [id])
  articleId Int
  author    User         @relation(fields: [authorId], references: [id]) // Author of the discussion
  authorId  Int
  parentId  Int?
  parent    Discussion?  @relation("DiscussionReplies", fields: [parentId], references: [id])
  replies   Discussion[] @relation("DiscussionReplies")
  UserFlag  UserFlag[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  article   Article  @relation(fields: [articleId], references: [id])
  articleId Int
}

model WateringLog {
  id          Int       @id @default(autoincrement())
  userPlant   UserPlant @relation(fields: [userPlantId], references: [id])
  userPlantId Int
  date        DateTime
  amount      Float?
  notes       String?
}

model FertilizingLog {
  id          Int       @id @default(autoincrement())
  userPlant   UserPlant @relation(fields: [userPlantId], references: [id])
  userPlantId Int
  date        DateTime
  fertilizer  String
  amount      Float?
  notes       String?
}

model WishlistPlant {
  id        Int    @id @default(autoincrement())
  plantName String
  user      User   @relation(fields: [userId], references: [id])
  userId    Int
}

model GraveyardPlant {
  id        Int      @id @default(autoincrement())
  plantName String
  startDate DateTime
  endDate   DateTime
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
}

model Room {
  id         Int         @id @default(autoincrement())
  name       String
  type       RoomType
  sunlight   String
  humidity   String
  user       User        @relation(fields: [userId], references: [id])
  userId     Int
  userPlants UserPlant[]
}

enum RoomType {
  LIVING_ROOM
  BEDROOM
  BATHROOM
  KITCHEN
  BALCONY
  OUTDOOR
  GREENHOUSE
}

model ModeratorRequest {
  id        Int                    @id @default(autoincrement())
  user      User                   @relation(fields: [userId], references: [id])
  userId    Int
  status    ModeratorRequestStatus @default(PENDING)
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt
}

enum ModeratorRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

model ChangeRequest {
  id        Int           @id @default(autoincrement())
  content   String
  status    RequestStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  author    User          @relation(fields: [authorId], references: [id])
  authorId  Int
  article   Article       @relation(fields: [articleId], references: [id])
  articleId Int
  approvals Approval[]
  flags     Flag[]
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

model Approval {
  id              Int           @id @default(autoincrement())
  createdAt       DateTime      @default(now())
  moderator       User          @relation(fields: [moderatorId], references: [id])
  moderatorId     Int
  changeRequest   ChangeRequest @relation(fields: [changeRequestId], references: [id])
  changeRequestId Int
}

model UserFlag {
  id                  Int         @id @default(autoincrement())
  reason              String
  createdAt           DateTime    @default(now())
  user                User        @relation(fields: [userId], references: [id]) // User who flagged
  userId              Int
  flaggedArticle      Article?    @relation(fields: [flaggedArticleId], references: [id]) // Optional flagging of article
  flaggedArticleId    Int?
  flaggedDiscussion   Discussion? @relation(fields: [flaggedDiscussionId], references: [id]) // Optional flagging of discussion
  flaggedDiscussionId Int?
  resolved            Boolean     @default(false)
  resolvedAt          DateTime?
}

model Flag {
  id              Int            @id @default(autoincrement())
  reason          String
  createdAt       DateTime       @default(now())
  flaggedChange   ChangeRequest? @relation(fields: [changeRequestId], references: [id])
  changeRequestId Int?
  resolved        Boolean        @default(false)
  resolvedAt      DateTime?
}

model TradeOffer {
  id              Int       @id @default(autoincrement())
  offerer         User      @relation("OfferedTrades", fields: [offererId], references: [id])
  offererId       Int
  recipient       User      @relation("ReceivedTrades", fields: [recipientId], references: [id])
  recipientId     Int
  offeredPlant    UserPlant @relation("OfferedPlant", fields: [offeredPlantId], references: [id])
  offeredPlantId  Int
  requestedPlant  UserPlant @relation("RequestedPlant", fields: [requestedPlantId], references: [id])
  requestedPlantId Int
  status          TradeStatus
  message         String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

enum TradeStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model UserNotification {
  id        Int      @id @default(autoincrement())
  type      NotificationType
  content   String
  relatedId Int?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
}

enum NotificationType {
  FRIEND_REQUEST
  ARTICLE_COMMENT
  CHANGE_REQUEST_APPROVED
  CHANGE_REQUEST_REJECTED
}